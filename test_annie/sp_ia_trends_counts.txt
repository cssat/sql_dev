-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`test_annie`@`localhost` PROCEDURE `sp_ia_trends_counts`( p_date varchar(3000)
,  p_age_grouping_cd varchar(30)
,  p_ethnicity_cd varchar(30)
,  p_cd_office varchar(250) 
,  p_cd_reporter_type varchar(100) 
,  p_filter_access_type varchar(30) 
,  p_filter_allegation  varchar(30)
, p_filter_finding varchar(30))
begin
 -- procedure begins here

    declare p_mindate datetime;
    declare p_maxdate datetime;
    declare p_maxmonthstart datetime;
    declare p_minmonthstart datetime;
    declare p_qry_id bigint;
    
    

    declare var_qry_cnt int;
    declare x1 float;
    declare x2 float;
    declare jitval float;
    declare  flg_procedure_off int;
    declare var_row_cnt_param int;
    declare var_row_cnt_cache int;
    declare var_calling_procedure int;
    
--    DECLARE EXIT HANDLER FOR SQLEXCEPTION ROLLBACK;
    
    set flg_procedure_off =0;
    
    if  flg_procedure_off =0 then    
    
        set x1=rand();
        set x2=rand();
            
        set var_calling_procedure = 18;

        call sp_ia_assign_desc (var_calling_procedure);

     
      --  set dates 
        
        select min_date_any ,max_date_any,min_date_any ,max_date_any into p_minmonthstart,p_maxmonthstart ,p_mindate,p_maxdate 
        FROM ref_lookup_max_date where id=var_calling_procedure;

        
        select qry_id into p_qry_id from cache_poc2ab_params
        where age_grouping_cd=left(p_age_grouping_cd,20)
            and cd_race_census=left(p_ethnicity_cd,30) 
            and cd_office=	left(p_cd_office,250)   
            and cd_reporter_type=left(p_cd_reporter_type,100)
            and filter_access_type=left(p_filter_access_type,30)
            and filter_allegation=left(p_filter_allegation,30)
            and filter_finding=left(p_filter_finding,30)
        limit 1; 
            
  set @qry_ID:= coalesce(p_qry_id,(select (max(qry_ID) + 1)  from cache_poc2ab_params),1);          
  if p_qry_id is null then    
  
      
  
			INSERT INTO cache_poc2ab_params
  			(qry_id
			 , age_grouping_cd
  			,cd_race_census
  			,cd_office
  			,cd_reporter_type
  			,filter_access_type
  			,filter_allegation
  			,filter_finding
  			,min_start_date
  			,max_start_date
  			,cnt_qry
  			,last_run_date)

    select 
        @qry_ID
  			,p_age_grouping_cd
  			,p_ethnicity_cd
  			,p_cd_office
  			,p_cd_reporter_type
  			,p_filter_access_type
  			,p_filter_allegation
  			,p_filter_finding
  			,p_minmonthstart
  			,p_maxmonthstart
  			,1
        ,now();
    else
        update cache_poc2ab_params
        set cnt_qry=cnt_qry + 1,last_run_date=now()
        where qry_id=p_qry_id;
    end if;

   


    call sp_create_ia_cachekeys (p_age_grouping_cd 
        , p_ethnicity_cd 
        , p_cd_office 
        , p_cd_reporter_type 
        , p_filter_access_type 
        , p_filter_allegation  
        , p_filter_finding 
        , coalesce(p_qry_id,@qry_id));
        


				
			update cachekeys cache join cache_qry_param_poc2ab poc2ab
			set in_cache=1,cache.qry_id=poc2ab.qry_id
			where poc2ab.int_all_param_key=cache.int_hash_key;
			
	
			select count(*), sum(in_cache) 
        into var_row_cnt_param,var_row_cnt_cache
        from cachekeys;

	if var_row_cnt_param <> var_row_cnt_cache then
        
      call sp_ia_load_param_tables(
           p_age_grouping_cd 
        ,  p_ethnicity_cd 
        ,  p_cd_office 
        ,  p_cd_reporter_type 
        ,  p_filter_access_type 
        ,  p_filter_allegation  
        ,  p_filter_finding 
        ,  0 -- load perCapita
        ,  1 -- load tblprmlocdem
        ,  p_mindate
        ,  p_maxdate
        ,  var_calling_procedure);      

 --   start transaction;  
 
        call sp_ia_assign_param_multiplier;

        set @incl='        
        insert IGNORE into cache_poc2ab_aggr 
            ( qry_type
                ,date_type
                ,start_date
                ,int_param_key
                ,cd_reporter_type
                ,cd_access_type
                ,cd_allegation
                ,cd_finding
                ,cd_sib_age_grp
                ,cd_race
                ,cd_office
                ,cnt_start_date
                ,cnt_opened
                ,cnt_closed
                ,min_start_date
                ,max_start_date
                ,x1
                ,x2
                ,insert_date
                ,int_all_param_key
                ,qry_id
                ,start_year)

           SELECT    
              prtl_poc2ab.qry_type
            , prtl_poc2ab.date_type 
            , prtl_poc2ab.start_date';
            
        if NOT (p_age_grouping_cd = '0' 
            and p_ethnicity_cd = '0' 
            and p_cd_office = '0' ) then
         set    @incl= concat(@incl,char(13),'
            , mtch.int_param_key ');
        else
            set @incl=concat(@incl,char(13),',',@int_param_key);
        end if;
        if p_cd_reporter_type = '0' then
            set @incl=concat(@incl,char(13),', 0');
        else
            set @incl=concat(@incl,char(13),', rpt.cd_reporter_type');
        end if;
        if p_filter_access_type = '0' then
             set @incl=concat(@incl,char(13),', 0');       
        else
            set @incl=concat(@incl,char(13),', acc.cd_access_type');
        end if;        
        if p_filter_allegation = '0' then
             set @incl=concat(@incl,char(13),', 0');       
        else
            set @incl=concat(@incl,char(13),', alg.cd_allegation');
        end if;  
        if p_filter_finding = '0' then
             set @incl=concat(@incl,char(13),', 0');       
        else
            set @incl=concat(@incl,char(13),', fnd.cd_finding');
        end if;     
        if NOT (p_age_grouping_cd = '0' 
            and p_ethnicity_cd = '0' 
            and p_cd_office = '0' ) then
            set @incl=concat(@incl,char(13),'
            , mtch.cd_sib_age_grp 
            , mtch.cd_race_census
            , mtch.cd_office');
        else
             set @incl=concat(@incl,char(13),'
            , 0,0,0');
        end if;
        set @incl=concat(@incl,char(13),'
            , coalesce(sum(prtl_poc2ab.cnt_start_date),0) as cnt_start_date
            , coalesce(sum(prtl_poc2ab.cnt_opened),0) as cnt_opened
            , coalesce(sum(prtl_poc2ab.cnt_closed),0) as cnt_closed');
  		set @incl=concat(@incl,char(13),', DATE',char(39), p_minmonthstart,char(39));
		set @incl=concat(@incl,char(13),', DATE',char(39), p_maxmonthstart,char(39));
		set @incl=concat(@incl,char(13),', ',char(39), x1,char(39));
		set @incl=concat(@incl,char(13),', ',char(39), x2,char(39));    
		set @incl=concat(@incl,char(13),', DATE',char(39), now() ,char(39),' as insert_date');           
    set @incl=concat(@incl,char(13),',cast((');
        if NOT (p_age_grouping_cd = '0' 
            and p_ethnicity_cd = '0' 
            and p_cd_office = '0' ) then
            set @incl=concat(@incl,'mtch.int_param_key');
        else
            set @incl=concat(@incl, @int_param_key);
        end if;
        set @incl=concat(@incl,' * ',@mult_int_param_key,') as decimal(12,0))
			+ cast((');
       if p_cd_reporter_type = '0' then
            set @incl=concat(@incl,char(13),' 0');
        else
            set @incl=concat(@incl,char(13),' rpt.cd_reporter_type');
        end if;
        set @incl=concat(@incl,'  * ',@mult_cd_reporter_type,') as decimal(12,0))
			+  cast((');
        if p_filter_access_type = '0' then
             set @incl=concat(@incl,char(13),' 0');       
        else
            set @incl=concat(@incl,char(13),' acc.cd_access_type');
        end if;   
        set @incl=concat(@incl,'   * ',@mult_cd_access_type,') as decimal(12,0))
			+  cast((');
        if p_filter_allegation = '0' then
             set @incl=concat(@incl,char(13),' 0');       
        else
            set @incl=concat(@incl,char(13),' alg.cd_allegation');
        end if;  
        set @incl=concat(@incl,' * ',@mult_cd_allegation,') as decimal(12,0))',char(13),'+ ');
        if p_filter_finding = '0' then
             set @incl=concat(@incl,char(13),' 0');       
        else
            set @incl=concat(@incl,char(13),' fnd.cd_finding');
        end if;     
        set @incl=concat(@incl,' * ',@mult_cd_finding,', ck.qry_id',char(13),'
            ,prtl_poc2ab.start_year
        FROM prtl_poc2ab  ');
           if NOT (p_age_grouping_cd = '0' 
            and p_ethnicity_cd = '0' 
            and p_cd_office = '0' ) then
			set @incl=concat(@incl,char(13),
			'join tblprmlocdem mtch 
            on mtch.int_match_param_key=prtl_poc2ab.int_match_param_key 
            and mtch.cd_race_census in (select cd_race from tbleth)');
        end if;
        if trim(p_cd_reporter_type)<>'0' then
	        set @incl=concat(@incl,char(13),'
			join tblrpt rpt on rpt.match_code=prtl_poc2ab.cd_reporter_type');
        end if;					
        if trim(p_filter_access_type)<>'0' then
	        set @incl=concat(@incl,char(13),'
			join tblacc acc on acc.match_code=prtl_poc2ab.filter_access_type');
        end if;					

        if trim(p_filter_allegation) <> '0' then
	        set @incl=concat(@incl,char(13),'
			join tblalg alg on alg.match_code=prtl_poc2ab.filter_allegation');
        end if;	       
        if trim(p_filter_finding) <> '0' then
	        set @incl=concat(@incl,char(13),'
			join tblfnd fnd on fnd.match_code=prtl_poc2ab.filter_finding');
        end if;	
    set @incl=concat(@incl,char(13),'
    join cachekeys ck on ck.int_hash_key=cast((');
            if NOT (p_age_grouping_cd = '0' 
            and p_ethnicity_cd = '0' 
            and p_cd_office = '0' ) then
            set @incl=concat(@incl,'mtch.int_param_key');
        else
            set @incl=concat(@incl,@int_param_key);
        end if;
        set @incl=concat(@incl,' * ',@mult_int_param_key,') as decimal(12,0))
			+ cast((');
       if p_cd_reporter_type = '0' then
            set @incl=concat(@incl,char(13),' 0');
        else
            set @incl=concat(@incl,char(13),' rpt.cd_reporter_type');
        end if;
        set @incl=concat(@incl,'  * ',@mult_cd_reporter_type,') as decimal(12,0))
			+  cast((');
        if p_filter_access_type = '0' then
             set @incl=concat(@incl,char(13),' 0');       
        else
            set @incl=concat(@incl,char(13),' acc.cd_access_type');
        end if;   
        set @incl=concat(@incl,'   * ',@mult_cd_access_type,') as decimal(12,0))
			+  cast((');
        if p_filter_allegation = '0' then
             set @incl=concat(@incl,char(13),' 0');       
        else
            set @incl=concat(@incl,char(13),' alg.cd_allegation');
        end if;  
        set @incl=concat(@incl,' * ',@mult_cd_allegation,') as decimal(12,0))',char(13),'+ ');
        if p_filter_finding = '0' then
             set @incl=concat(@incl,char(13),' 0');       
        else
            set @incl=concat(@incl,char(13),' fnd.cd_finding');
        end if;  
        set @incl=concat(@incl,'* ',@mult_cd_finding,char(13), ' and ck.in_cache=0');
        
        set @incl=concat(@incl,char(13),'where prtl_poc2ab.start_date 
        between DATE ',char(39),p_minmonthstart,char(39),' and DATE ',char(39),p_maxmonthstart,char(39));
        set @incl=concat(@incl,char(13),'
        group by  prtl_poc2ab.qry_type
                ,prtl_poc2ab.date_type 
                ,prtl_poc2ab.start_date
                ,prtl_poc2ab.start_year');
            if NOT (p_age_grouping_cd = '0' 
            and p_ethnicity_cd = '0' 
            and p_cd_office = '0' ) then    
            set @incl=concat(@incl,char(13),'
                ,mtch.int_param_key
                ,mtch.cd_sib_age_grp 
                ,mtch.cd_race_census
                ,mtch.cd_office');
            end if;
              if trim(p_cd_reporter_type)<>'0' then
	        set @incl=concat(@incl,char(13),'   
                , rpt.cd_reporter_type');
            end if;
           if trim(p_filter_access_type)<>'0' then
	        set @incl=concat(@incl,char(13),'     
                , acc.cd_access_type');
         end if;
           if trim(p_filter_allegation) <> '0' then
	        set @incl=concat(@incl,char(13),'
                , alg.cd_allegation');
         end if;
           if trim(p_filter_finding) <> '0' then
	        set @incl=concat(@incl,char(13),'
                , fnd.cd_finding;');
            end if;     
  --      select @incl;
        drop temporary table if exists mycode;
        create temporary table mycode as select @incl;
  
        PREPARE stmt FROM @incl;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
 
   			insert into cache_qry_param_poc2ab
						(int_param_key
						,cd_sib_age_grp
						,cd_race
						,cd_office
						,cd_reporter_type
						,cd_access_type
						,cd_allegation
						,cd_finding
						,qry_id
						,int_all_param_key)
		
						select 
						ck.int_param_key
						,cd_sib_age_grp
						,cd_race_census
						,cd_office
						,cd_reporter_type
						,cd_access_type
						,cd_allegation
						,cd_finding
						,ck.qry_id
						,ck.int_hash_key
						from cachekeys ck
						join (select distinct int_param_key
											, cd_sib_age_grp 
											, cd_race_census
											, cd_office
											from tblprmlocdem) q on q.int_param_key=ck.int_param_key
						where ck.in_cache=0;        
 end if;
	

SELECT  
		poc2ab.qry_type as   "qry_type_poc2"
		, poc2ab.date_type
		, poc2ab.start_date  as "Month"
		, poc2ab.cd_sib_age_grp as  "age_grouping_cd"
		, ref_age.tx_sib_age_grp as "Age Grouping"
		, poc2ab.cd_race  as "ethnicity_cd"
		, case poc2ab.cd_race  when 0   then @eth0  when 1   then @eth1  when 2   then @eth2  when 3   then @eth3  when 4   then @eth4  when 5   then @eth5  when 6   then @eth6  when 7   then @eth7  when 8   then @eth8  when 9   then @eth9  when 10  then @eth10 when 11  then @eth11 when 12  then @eth12 end as "Race/Ethnicity" 
		, poc2ab.cd_office as office_cd
		, ref_ofc.tx_office as Office
		, poc2ab.cd_reporter_type
		, ref_rpt.tx_reporter_type as "Reporter_Desc"
		, poc2ab.cd_access_type
		, ref_acc.tx_access_type as "Access_type_desc"
		, poc2ab.cd_allegation
		, case poc2ab.cd_allegation  when 0  then @alg0 when 1  then @alg1 when 2  then @alg2 when 3  then @alg3 when 4  then @alg4 end as "Allegation"
		, poc2ab.cd_finding
		, case poc2ab.cd_finding  when 0  then @fnd0 when 1  then @fnd1 when 2  then @fnd2 when 3  then @fnd3 when 4  then @fnd4 end as "Finding"
        ,case when poc2ab.cnt_start_date > 0 /* jitter all above 0 */  
                    then 
                        case when round(poc2ab.cnt_start_date + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0)  < 1
                        then 1
                        else round(poc2ab.cnt_start_date + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0) 
                        end
                    else poc2ab.cnt_start_date
            end as "Total Cases First Day"
        ,case when (poc2ab.cnt_opened) > 0 /* jitter all above 0 */  
                    then 
                        case when round((poc2ab.cnt_opened) + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0)  < 1
                        then 1
                        else round((poc2ab.cnt_opened) + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0) 
                        end
                    else (poc2ab.cnt_opened) 
            end as "Opened Cases"
        ,(case when
            (
                (case when poc2ab.cnt_start_date > 0 /* jitter all above 0 */  
                    then 
                        case when round(poc2ab.cnt_start_date + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0)  < 1
                        then 1
                        else round(poc2ab.cnt_start_date + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0) 
                        end
                    else poc2ab.cnt_start_date
                    end)		
                + --  opened
                (case when (poc2ab.cnt_opened) > 0 /* jitter all above 0 */  
                    then 
                        case when round((poc2ab.cnt_opened) + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0)  < 1
                        then 1
                        else round((poc2ab.cnt_opened) + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0) 
                        end
                    else (poc2ab.cnt_opened) 
                end))
                <  --  closed
                (case when (poc2ab.cnt_closed) > 0 /* jitter all above 0 */  
                    then 
                        case when round(poc2ab.cnt_closed + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0)  < 1
                        then 1
                        else round(poc2ab.cnt_closed + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0) 
                        end
                    else (poc2ab.cnt_closed) 
                        end)
        then -- use first day plus opened
            (
                (case when poc2ab.cnt_start_date > 0 /* jitter all above 0 */  
                    then 
                        case when round(poc2ab.cnt_start_date + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0)  < 1
                        then 1
                        else round(poc2ab.cnt_start_date + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0) 
                        end
                    else poc2ab.cnt_start_date
                    end)		
                + --  opened
                (case when (poc2ab.cnt_opened) > 0 /* jitter all above 0 */  
                    then 
                        case when round((poc2ab.cnt_opened) + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0)  < 1
                        then 1
                        else round((poc2ab.cnt_opened) + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0) 
                        end
                    else (poc2ab.cnt_opened) 
                end))
        else -- use exits
                    (case when (poc2ab.cnt_closed) > 0 /* jitter all above 0 */  
                    then 
                        case when round(poc2ab.cnt_closed + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0)  < 1
                        then 1
                        else round(poc2ab.cnt_closed + (2 * sqrt(-2 * log(poc2ab.x1)) * cos(2*pi()*poc2ab.x2)),0) 
                        end
                    else (poc2ab.cnt_closed) 
                        end)
        end) as "Case Closures"
    from cache_poc2ab_aggr poc2ab
   join cachekeys ck on ck.qry_id=poc2ab.qry_id
   and ck.int_hash_key=poc2ab.int_all_param_key
   join ref_lookup_sib_age_grp ref_age on ref_age.cd_sib_age_grp=poc2ab.cd_sib_age_grp
            join ref_lookup_office_collapse ref_ofc on ref_ofc.cd_office=poc2ab.cd_office
            join ref_filter_reporter_type ref_rpt on ref_rpt.cd_reporter_type=poc2ab.cd_reporter_type
            join ref_filter_access_type ref_acc on ref_acc.cd_access_type=poc2ab.cd_access_type
            where poc2ab.start_date 
            between p_mindate and p_maxdate
            order by qry_type,date_type,start_date,poc2ab.cd_sib_age_grp 
            ,poc2ab.cd_race
            ,poc2ab.cd_office
            ,poc2ab.cd_reporter_type
            ,poc2ab.cd_access_type
            ,poc2ab.cd_allegation
            ,poc2ab.cd_finding;        
	
          end if; -- turn procedure off
    end
