-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`test_annie`@`localhost` PROCEDURE `load_poc1ab_parameters`(  p_date varchar(3000)
,  p_age_grouping_cd varchar(30)
,  p_ethnicity_cd varchar(30)
,  p_gender_cd varchar(10)
,  p_init_cd_plcm_setng varchar(30)
,  p_long_cd_plcm_setng varchar(30) 
,  p_county_cd varchar(200) 
,  p_bin_los_cd varchar(30) 
,  p_bin_placement_cd varchar(30) 
,  p_bin_ihs_svc_cd varchar(30) 
,  p_cd_reporter_type varchar(100) 
,  p_filter_access_type varchar(30) 
,  p_filter_allegation  varchar(30)
, p_filter_finding varchar(30)
, p_filter_service_category  varchar(100)
, p_filter_service_budget varchar(100)
,p_is_perCapita int
,p_mindate datetime
,p_maxdate datetime)
BEGIN
     
    declare intFoundPos integer;

    declare strElement varchar(3000);
    declare strValues varchar(3000);
    declare intVal integer;		
    declare intincAll integer;

        DROP TEMPORARY TABLE IF EXISTS tbltmpValues;
        create temporary table tbltmpValues (strVal varchar(10));

         
        -- create and load parameter tables
        DROP TEMPORARY TABLE IF EXISTS tblage;
        create temporary table tblage(age_grouping_cd int
        ,age_grouping char(50)
        ,match_code int,primary key (match_code,age_grouping_cd)
            ,key idx_age_match(match_code));

        
        DROP TEMPORARY TABLE IF EXISTS tbleth;  
        create TEMPORARY table tbleth(cd_race int,cd_origin int,match_code int
        ,key idx_eth_match(match_code,cd_origin,cd_race) );
        
        
        
        DROP TEMPORARY TABLE IF EXISTS tblgdr;
        create temporary table tblgdr(pk_gndr int,match_code int
        ,primary key(match_code,pk_gndr),key idx_gndr_match(match_code),key idx_pk_gndr(pk_gndr));
   

        DROP TEMPORARY TABLE IF EXISTS tblfpl;
        create temporary table  tblfpl(cd_plcm_setng int,match_code int,primary key(cd_plcm_setng,match_code)
            ,key idx_fpl_match2(match_code),key idx_fpl_match(cd_plcm_setng));

        
        DROP TEMPORARY TABLE IF EXISTS tbllpl;
        create temporary table  tbllpl(cd_plcm_setng int,match_code int
                ,primary key (cd_plcm_setng,match_code)
                ,key idx_lpl_match2(match_code));
        
       
        DROP TEMPORARY TABLE IF EXISTS tblcnty;
        create TEMPORARY table tblcnty(
                              cd_cnty int
                            , match_code int
                            , primary key(match_code,cd_cnty)
                            , key idx_cnty_match2(match_code)
                            , key idx_cnty_match(cd_cnty));
        

      

        DROP TEMPORARY TABLE IF EXISTS tbllos;
        create temporary table tbllos(bin_los_cd int,match_code int
        ,primary key(bin_los_cd,match_code));
        create index idx_los_cd on tbllos(match_code);

        DROP TEMPORARY TABLE IF EXISTS  tblnbrplc;
        create temporary table tblnbrplc(bin_placement_cd int,match_code int,primary key(bin_placement_cd,match_code));
        create index idx_nbrplcm on tblnbrplc(match_code);


        DROP TEMPORARY TABLE IF EXISTS tblihs;
        create temporary table tblihs(bin_ihs_svc_cd int,match_code int,primary key(bin_ihs_svc_cd,match_code),key(match_code));
        
        
        DROP TEMPORARY TABLE IF EXISTS tblrpt;
        create temporary table tblrpt(cd_reporter_type int,match_code int,primary key(cd_reporter_type,match_code),key(match_code));
       
        
        DROP TEMPORARY TABLE IF EXISTS tblacc;
        create temporary table tblacc(cd_access_type int,filter_access_type decimal(18,0),match_code decimal(18,0),primary key (cd_access_type,match_code));
        create index idx_access_type on tblacc(match_code);
        create index idx_access_type3 on tblacc(cd_access_type);

        DROP TEMPORARY TABLE IF EXISTS tblalg;
        create temporary table tblalg(cd_allegation int,filter_allegation decimal(18,0),match_code decimal(18,0),primary key(match_code,cd_allegation));
        create index idx_algtn on tblalg(match_code);
        create index idx_algtn2 on tblalg(cd_allegation);

        DROP TEMPORARY TABLE IF EXISTS tblfnd;
        create temporary table tblfnd(cd_finding int,filter_finding decimal(18,0),match_code decimal(18,0),primary key(match_code,cd_finding));
        create index idx_finding on tblfnd(match_code);
        create index idx_find2 on tblfnd(cd_finding);

        DROP TEMPORARY TABLE IF EXISTS tblsrvc;
        create temporary table tblsrvc(cd_subctgry_poc_frc int,filter_srvc_type decimal(18,0),match_code decimal(18,0),primary key(cd_subctgry_poc_frc,match_code));
        create index idx_srvc on tblsrvc(match_code);

        DROP TEMPORARY TABLE IF EXISTS tblbudg;
        create temporary table tblbudg(cd_budget_poc_frc int,filter_budget decimal(18,0),match_code decimal(18,0),primary key(cd_budget_poc_frc,match_code));
       
     
-- age

    call loadparameter(p_age_grouping_cd);

    insert into tblage(age_grouping_cd,match_code)
    select   ref_lookup_age_census.age_grouping_cd
            ,ref_lookup_age_census.age_grouping_cd
    from ref_lookup_age_census 
    join tbltmpValues on cast(strVal as unsigned)=ref_lookup_age_census.age_grouping_cd
    where tbltmpValues.strVal<>'0';

    insert into tblage(age_grouping_cd,match_code)
    select   coalesce(qAll.Age_Grouping_Cd,0)
            ,ref_lookup_age_census.age_grouping_CD
    from ref_lookup_age_census 
    left join  ref_lookup_age_census qAll
            on qAll.age_grouping_cd=0
    where  ref_lookup_age_census.age_grouping_cd between 1 and 4
    and '0' in (select strVal from tbltmpValues);
            


    DROP TEMPORARY TABLE IF EXISTS tblage2;
    create temporary table tblage2 engine=memory as select distinct age_grouping_cd from tblage;
    
        
    --  race/ethnicity
    call loadparameter(p_ethnicity_cd);
    
    insert into tbleth(cd_race,cd_origin,match_code)
    select distinct ref_lookup_ethnicity.cd_race_census
            ,xwlk.census_hispanic_latino_origin_cd
            ,ref_lookup_ethnicity.cd_race_census
    from ref_lookup_ethnicity_census ref_lookup_ethnicity
    join tbltmpValues on cast(strVal as unsigned)=ref_lookup_ethnicity.CD_RACE_census
    join ref_xwalk_race_origin xwlk on xwlk.cd_race_census =ref_lookup_ethnicity.cd_race_census
    where ref_lookup_ethnicity.cd_race_census between 1 and 8;
    
            
    insert into tbleth(cd_race,cd_origin,match_code)
    select distinct ref_lookup_ethnicity.cd_race_census
            ,cen.census_Hispanic_Latino_Origin_cd
            ,xwlk.cd_race_census
    from ref_lookup_ethnicity_census ref_lookup_ethnicity
    join tbltmpValues on cast(strVal as unsigned)=ref_lookup_ethnicity.CD_RACE_census
    join ref_lookup_hispanic_latino_census cen on cen.cd_race_census=ref_lookup_ethnicity.cd_race_census
    join ref_xwalk_race_origin xwlk on xwlk.census_hispanic_latino_origin_cd=cen.census_Hispanic_Latino_Origin_cd
    where ref_lookup_ethnicity.cd_race_census in (9,10,11,12);
            

    insert into tbleth(cd_race,cd_origin,match_code)
    select distinct coalesce(qAll.cd_race_census,0)
        ,xwlk.census_hispanic_latino_origin_cd
        ,ref_lookup_ethnicity.cd_race_census
    from ref_lookup_ethnicity_census ref_lookup_ethnicity
    join ref_xwalk_race_origin xwlk 
    on xwlk.cd_race_census =ref_lookup_ethnicity.cd_race_census
    left join ref_lookup_ethnicity_census  qAll on qAll.cd_race_census=0
    where '0' in (select strVal from tbltmpValues);
    

   
    
--     DROP TEMPORARY TABLE IF EXISTS tbleth2;
--     create temporary table tbleth2 like tbleth;
--     insert into tbleth2
--     select * from tbleth;
    DROP TEMPORARY TABLE IF EXISTS tbleth2;
    create temporary table tbleth2 engine=memory as select distinct cd_race from tbleth;

--  gender
    call loadparameter(p_gender_cd);
   

    insert into tblgdr(PK_GNDR,match_code)
    select 
             ref_lookup_gender.PK_GNDR
            ,ref_lookup_gender.PK_GNDR
    from ref_lookup_gender
    join tbltmpValues on cast(strVal as unsigned)=ref_lookup_gender.PK_GNDR
    where tbltmpValues.strVal<> '0';

    insert into tblgdr(PK_GNDR,match_code)
     select  0
            ,ref_lookup_gender.PK_GNDR
        from ref_lookup_gender
        where  ref_lookup_gender.PK_GNDR >0
        and '0' in (select strVal from tbltmpValues);        
   


        
   DROP TEMPORARY TABLE IF EXISTS tblgdr2;
    create temporary table tblgdr2 engine=memory as select distinct pk_gndr from tblgdr;     
    
     --  initial placement   
    delete from tbltmpValues;
    set intincAll=null;
    set strValues=p_init_cd_plcm_setng;
    set 	intFoundPos =INSTR(strValues,','); 
    while intFoundPos <>0  DO
        
            set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
            SET strValues = RIGHT(strValues,LENGTH(strValues)-intFoundPos);
        
            insert into tbltmpValues (strVal) values (strElement);
            set intFoundPos=INSTR(strValues,','); 
        end while;

    if strValues <> ''  then
            INSERT Into tbltmpValues(strVal) values (strValues);
    end if;

    insert into tblfpl(cd_plcm_setng,match_code)
    select 
             ref_lookup_placement.placement_cd
            ,ref_lookup_placement.placement_cd
    from ref_lookup_placement
    join tbltmpValues on cast(strVal as signed)=ref_lookup_placement.placement_cd
    where ref_lookup_placement.placement_cd <> 0;

    set intincAll = (select cast(strVal as unsigned) from tbltmpValues where strVal='0' limit 0,1);


    if intincAll = 0 then
        insert into tblfpl(cd_plcm_setng,match_code)
        select 
                 0
                ,ref_lookup_placement.placement_cd
        from ref_lookup_placement
        where  ref_lookup_placement.placement_cd<>0;        
         
    end if;
    
DROP TEMPORARY TABLE IF EXISTS tblfpl2;
    create temporary table tblfpl2 engine=memory as select distinct cd_plcm_setng from tblfpl;         


    -- last placement
    delete from tbltmpValues;
    set intincAll=null;
    set strValues=p_long_cd_plcm_setng;
    set 	intFoundPos =INSTR(strValues,','); 
    while intFoundPos <>0  DO
        
            set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
            SET strValues = RIGHT(strValues,LENGTH(strValues)-intFoundPos);
        
            insert into tbltmpValues (strVal) values (strElement);
            set intFoundPos=INSTR(strValues,','); 
        end while;

    if strValues <> ''  then
            INSERT Into tbltmpValues(strVal) values (strValues);
    end if;

    insert into tbllpl(cd_plcm_setng,match_code)
    select 
            ref_lookup_placement.placement_cd
            ,ref_lookup_placement.placement_cd
    from ref_lookup_placement
    join tbltmpValues on cast(strVal as signed)=ref_lookup_placement.placement_cd
    where ref_lookup_placement.placement_cd <> 0;

    set intincAll = (select cast(strVal as unsigned) from tbltmpValues where strVal='0' limit 0,1);


    if intincAll = 0 then
        insert into tbllpl(cd_plcm_setng,match_code)
        select 
                 0
                ,ref_lookup_placement.placement_cd
        from ref_lookup_placement
        where ref_lookup_placement.placement_cd <>0;   
        
         
    end if;

   DROP TEMPORARY TABLE IF EXISTS tbllpl2;
    create temporary table tbllpl2 engine=memory as select distinct cd_plcm_setng from tbllpl; 
        
--  county cd

    delete from tbltmpValues;
    set intincAll=null;
    set strValues=p_county_cd;
    set 	intFoundPos =INSTR(strValues,','); 
    while intFoundPos <>0  DO
        set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
        SET strValues = RIGHT(strValues,LENGTH(strValues)-intFoundPos);
        insert into tbltmpValues (strVal) values (strElement);
        set intFoundPos=INSTR(strValues,','); 
    end while;

    if strValues <> ''  then
            INSERT Into tbltmpValues(strVal) values (strValues);
    end if;

    insert into tblcnty(cd_cnty,match_code)
    select 
             ref_lookup_county_all.County_Cd
            ,ref_lookup_county_all.County_Cd
    from ref_lookup_county_all
    join tbltmpValues on cast(strVal as signed)=ref_lookup_county_all.County_Cd
    where ref_lookup_county_all.County_Cd<>0;

    set intincAll = (select cast(strVal as unsigned) from tbltmpValues where strVal='0' limit 0,1);


    if intincAll = 0 then
        insert into tblcnty(cd_cnty,match_code)
        select 
                coalesce(qAll.county_cd,0)
                ,ref_lookup_county_all.County_Cd
        from ref_lookup_county_all
         left join ref_lookup_county_all qAll on qAll.County_Cd=0
              where ref_lookup_county_all.County_Cd between 1 and 39 
                or ref_lookup_county_all.County_Cd=-99;  
    end if;
     
    
    DROP TEMPORARY TABLE IF EXISTS tblcnty2;
    create temporary table tblcnty2 engine=memory as select distinct cd_cnty from tblcnty;  

 -- LOS 

            delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_bin_los_cd;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;

            insert into tbllos(bin_los_cd,match_code)
            select distinct cast(strVal as signed),los.bin_los_cd
            from ref_filter_los los
            join tbltmpValues on cast(strVal as unsigned)<=los.bin_los_cd
            where cast(strVal as unsigned) <> '0' ;

            set intincAll = (select cast(strVal as unsigned) from tbltmpValues where strVal='0' limit 0,1);
            
            if intincAll = 0 then
                insert into tbllos(bin_los_cd,match_code)
                select distinct 0,los.bin_los_cd
                from ref_filter_los los
                where los.bin_los_cd<>0;
            end if;
                
        DROP TEMPORARY TABLE IF EXISTS tbllos2;
        create temporary table tbllos2 engine=memory as select distinct bin_los_cd from tbllos;
 
 -- Nbr of placements

            delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_bin_placement_cd;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;

            insert into tblnbrplc(bin_placement_cd,match_code)
            select distinct flt.bin_placement_cd,flt.bin_placement_cd
            from ref_filter_nbr_placement flt
            join tbltmpValues on cast(strVal as signed)=flt.bin_placement_cd
            where flt.bin_placement_cd<>0;

            set intincAll = (select cast(strVal as signed) 
            from tbltmpValues where strVal='0' limit 0,1);
            
             if intincAll = 0 then
                insert into tblnbrplc(bin_placement_cd,match_code)
                select 0,flt.bin_placement_cd
                from ref_filter_nbr_placement flt
                where flt.bin_placement_cd<>0;
            end if;
            
        DROP TEMPORARY TABLE IF EXISTS tblnbrplc2;
        create temporary table tblnbrplc2  engine=memory as select distinct bin_placement_cd from tblnbrplc;              
          -- IHS

            delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_bin_ihs_svc_cd;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;

            insert into tblihs(bin_ihs_svc_cd,match_code)
            select distinct flt.bin_ihs_svc_cd,flt.bin_ihs_svc_cd
            from ref_filter_ihs_services flt
            join tbltmpValues on cast(strVal as signed)=flt.bin_ihs_svc_cd
            where flt.bin_ihs_svc_cd<>0;

            set intincAll = (select cast(strVal as signed) 
            from tbltmpValues where strVal='0' limit 0,1);
            
             if intincAll = 0 then
                insert into tblihs(bin_ihs_svc_cd,match_code)
                select 0,flt.bin_ihs_svc_cd
                from ref_filter_ihs_services flt
                where flt.bin_ihs_svc_cd<>0;
             end if;
                
        DROP TEMPORARY TABLE IF EXISTS tblihs2;
        create temporary table tblihs2 ENGINE=memory as select distinct bin_ihs_svc_cd from tblihs;   
    --  REPORTER FILTER

            delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_cd_reporter_type;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;
            
            
            insert into tblrpt(cd_reporter_type,match_code)
            select flt.cd_reporter_type,flt.cd_reporter_type
            from ref_filter_reporter_type flt
            join tbltmpValues on cast(strVal as signed)=flt.cd_reporter_type
            where flt.cd_reporter_type <> 0;
            
            

            set intincAll = (select cast(strVal as signed)  from tbltmpValues where strVal='0' limit 0,1);
            
            if intincAll = 0 then
                insert into tblrpt(cd_reporter_type,match_code)
                select 0,flt.cd_reporter_type
                from ref_filter_reporter_type flt
                where flt.cd_reporter_type <> 0;
            end if;
            
          DROP TEMPORARY TABLE IF EXISTS tblrpt2;
        create temporary table tblrpt2 engine=memory as select distinct cd_reporter_type from tblrpt;    
        
     --   access_type
            delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_filter_access_type;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;
            
            
            insert into tblacc(cd_access_type,filter_access_type,match_code)
            select flt.cd_access_type,flt.filter_access_type,flt.filter_access_type
            from ref_filter_access_type flt
            join tbltmpValues on cast(strVal as signed)=flt.cd_access_type
            where flt.cd_access_type <>0;
            
           
           

            set intincAll = (select cast(strVal as signed)  from tbltmpValues where strVal='0' limit 0,1);
            -- only valid values are 0 and 1 right now
            if intincAll = 0 then
                insert into tblacc(cd_access_type,filter_access_type,match_code)
               select 0,flt.filter_access_type,flt.filter_access_type
               from ref_filter_access_type flt
                where flt.cd_access_type <>0;

            end if;

        DROP TEMPORARY TABLE IF EXISTS tblacc2;
        create temporary table tblacc2 engine=memory as select distinct cd_access_type from tblacc;    

    --   ALLEGATIONS
            delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_filter_allegation;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;
            
             insert into tblalg(cd_allegation,filter_allegation,match_code)
             select cd_allegation,cd_allegation ,filter_allegation
             from ref_match_allegation
             join tbltmpValues on cast(strVal as signed)=ref_match_allegation.cd_allegation
             where ref_match_allegation.cd_allegation<>0;
             
             
            set intincAll = (select cast(strVal as signed)  from tbltmpValues where strVal='0' limit 0,1);         
            
            if intincAll=0 then
                insert into tblalg(cd_allegation,filter_allegation,match_code)
                select distinct 0,0,filter_allegation
                from ref_match_allegation
                where cd_allegation<>0
                union
                select distinct 0,0,10000;
            
            end if;

        DROP TEMPORARY TABLE IF EXISTS tblalg2;
        create temporary table tblalg2 engine=memory as  select distinct cd_allegation from tblalg;    
        
    --   FINDINGS
            delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_filter_finding;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;
            
             insert into tblfnd(cd_finding,filter_finding,match_code)
             select cd_finding,cd_finding ,filter_finding
             from ref_match_finding
             join tbltmpValues on cast(strVal as signed)=ref_match_finding.cd_finding
             where ref_match_finding.cd_finding<>0;
             
             
            set intincAll = (select cast(strVal as signed)  from tbltmpValues where strVal='0' limit 0,1);         
            
            if intincAll=0 then
                insert into tblfnd(cd_finding,filter_finding,match_code)
                select distinct 0,0,filter_finding
                from ref_match_finding
                where cd_finding<>0
                union
                select distinct 0,0,10000;
            
            end if;
  
        DROP TEMPORARY TABLE IF EXISTS tblfnd2;
        create temporary table tblfnd2 engine=memory as select distinct cd_finding from tblfnd;    
  
    --  services 
      delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_filter_service_category;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;
            
             insert into tblsrvc(cd_subctgry_poc_frc,filter_srvc_type,match_code)
             select cd_subctgry_poc_fr,cd_subctgry_poc_fr ,filter_srvc_type
             from ref_match_srvc_type_category
             join tbltmpValues on cast(strVal as signed)=ref_match_srvc_type_category.cd_subctgry_poc_fr
             where ref_match_srvc_type_category.cd_subctgry_poc_fr<>0;
             
             
            set intincAll = (select cast(strVal as signed)  from tbltmpValues where strVal='0' limit 0,1);         
            
            if intincAll=0 then
                insert into tblsrvc(cd_subctgry_poc_frc,filter_srvc_type,match_code)
                select distinct 0,0,filter_srvc_type
                from ref_match_srvc_type_category
                where cd_subctgry_poc_fr<>0
                union
                select 0,0,10000000000000000;
            
            end if;
        
        DROP TEMPORARY TABLE IF EXISTS tblsrvc2;
        create temporary table tblsrvc2 engine=memory as select distinct cd_subctgry_poc_frc from tblsrvc;    
           
    --  budget 
            delete from tbltmpValues;
            set intincAll=null;
            set strValues=p_filter_service_budget;
            set 	intFoundPos =instr(strValues,','); 
            while intFoundPos <>0  DO
                    set strElement=SUBSTRING(strValues, 1, intFoundPos-1); 
                    SET strValues = RIGHT(strValues,length(strValues)-intFoundPos);
                
                    insert into tbltmpValues (strVal) values (strElement);
                    set intFoundPos=instr(strValues,','); 
            end while;

            if strValues <> ''  then
                INSERT Into tbltmpValues(strVal) values (strValues);
            end if;
      
            insert into tblbudg(cd_budget_poc_frc,filter_budget,match_code)
             select cd_budget_poc_frc,cd_budget_poc_frc ,filter_service_budget
             from ref_match_srvc_type_budget
             join tbltmpValues on cast(strVal as signed)=ref_match_srvc_type_budget.cd_budget_poc_frc
             where ref_match_srvc_type_budget.cd_budget_poc_frc<>0;
             
             
            set intincAll = (select cast(strVal as signed)  from tbltmpValues where strVal='0' limit 0,1);         
            
            if intincAll=0 then
                insert into tblbudg(cd_budget_poc_frc,filter_budget,match_code)
                select distinct 0,0,filter_service_budget
                from ref_match_srvc_type_budget
                where cd_budget_poc_frc<>0
               union select 0,0,10000000;
            
            end if;
        DROP TEMPORARY TABLE IF EXISTS tblbudg2;
        create temporary table tblbudg2 engine=memory as select distinct cd_budget_poc_frc from tblbudg;         
  
     
drop temporary table if exists tblprmlocdem ;
create temporary table tblprmlocdem engine=memory as 
    select distinct
				int_param_key 
				,int_match_param_key
				,ooh.age_grouping_cd
				,ooh.pk_gndr
				,ooh.cd_race_census
				,ooh.init_cd_plcm_setng
				,ooh.long_cd_plcm_setng
				,ooh.county_cd
				,ooh.match_age_grouping_cd
				,ooh.match_pk_gndr
				,ooh.match_cd_race_census
				,ooh.match_cd_hispanic_latino_origin
				,ooh.match_init_cd_plcm_setng
				,ooh.match_long_cd_plcm_setng
				,ooh.match_county_cd
			from  ref_match_ooh_parameters ooh
			join tbleth eth on eth.match_code=ooh.match_cd_race_census
				and eth.cd_origin=ooh.match_cd_hispanic_latino_origin
				and eth.cd_race=ooh.cd_race_census
			join tblage age on  age.age_grouping_cd=ooh.age_grouping_cd
				and age.match_code=ooh.match_age_grouping_cd
			join tblgdr gdr on gdr.pk_gndr=ooh.pk_gndr
					and gdr.match_code=ooh.match_pk_gndr
			join tblfpl fpl on fpl.cd_plcm_setng=ooh.init_cd_plcm_setng
					and fpl.match_code=ooh.match_init_cd_plcm_setng
			join tbllpl lpl on lpl.cd_plcm_setng=ooh.long_cd_plcm_setng
					and lpl.match_code=ooh.match_long_cd_plcm_setng
			join tblcnty cnty on cnty.cd_cnty=ooh.county_cd
					and cnty.match_code=ooh.match_county_cd
					and ooh.match_county_cd not in (40,999)
			where ooh.fl_in_tbl_child_episodes = 1;

      create index idx_int_match_param_key_demog_fields on tblprmlocdem(
				int_match_param_key
				,age_grouping_cd
				,cd_race_census
				,pk_gndr
				,init_cd_plcm_setng
				,long_cd_plcm_setng
				,county_cd);

       create index idx_int_match_cd_race_census on tblprmlocdem(
				cd_race_census
				);

		create index idx_county_cd on tblprmlocdem(
				county_cd
				);    
     
if p_is_perCapita = 1 then
 DROP TEMPORARY TABLE IF EXISTS  tblpop_proj;


        -- select measurement_year,age.age_grouping_cd,eth.cd_race,gdr.pk_gndr,cnty.cd_cnty,sum(pop_cnt)
        DROP TEMPORARY TABLE IF EXISTS  tblpop_proj;
        create TEMPORARY table tblpop_proj engine=memory as 
        select measurement_year,age.age_grouping_cd,eth.cd_race,gdr.pk_gndr,cnty.cd_cnty as county_cd,sum(pop_cnt) as pop_cnt
        from ref_lookup_census_population cns
        join tblage age on age.match_code=cns.age_grouping_cd
        join tblethcen eth on eth.match_code=cns.cd_race
        join tblgdr gdr on gdr.match_code=cns.pk_gndr
        join tblcnty cnty on cnty.match_code=cns.county_cd
        where measurement_year between year(p_mindate) and year(p_maxdate)
        group by measurement_year,age.age_grouping_cd
        ,eth.cd_race,gdr.pk_gndr,cnty.cd_cnty;
        
         create index  `idx_age_eth_gdr_cty_year` on tblpop_proj(measurement_year,age_grouping_cd,cd_race,pk_gndr,county_cd);
        
        
end if;
    

end
