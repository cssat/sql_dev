,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
,1
,0))) / sims
}
bday_plot <- ggplot(outcomes, aes(x = n, weight = success)) +
geom_histogram(bins = 49) +
labs(x = 'Students'
,y = 'Successes'
,title = paste(sims, 'Simulations')) +
theme_bw()
return(bday_plot)
}
ptm <- proc.time()
get_bdays3(10000)
proc.time() - ptm
ptm <- proc.time()
get_bdays(10000)
proc.time() - ptm
outcomes[outcomes$`2` == i, 2] <- sum(replicate(n, ifelse(anyDuplicated(sample(1:365, 2, replace = TRUE)) > 0, 1, 0))) / n
head(bdays)
ptm <- proc.time()
get_bdays3(10000)
proc.time() - ptm
ptm <- proc.time()
get_bdays(10000)
proc.time() - ptm
ptm <- proc.time()
get_bdays3(10000)
proc.time() - ptm
ptm <- proc.time()
bday_sim(10000)
proc.time() - ptm
6.36 * 6
}
outcomes
bday_sim <- function(sims, start = 2, stop = 50){
outcomes <- data.frame(n = start:stop, success = 0)
for (i in start:stop){
outcomes[outcomes$n == i, 2] <- sum(replicate(sims
,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
, 1, 0))) / sims
}
bday_plot <- ggplot(outcomes, aes(x = n, weight = success)) +
geom_histogram(bins = 49) +
labs(x = 'Students'
,y = 'Successes'
,title = paste(sims, 'Simulations')) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1) +
theme_bw()
return(bday_plot)
}
bday_sim(10000)
10000 * 50
read.csv('C:/Users/oieeri26.NETID/Downloads/Count_of_All_Children.csv')
dat <- read.csv('C:/Users/oieeri26.NETID/Downloads/Count_of_All_Children.csv')
dat
row.names(dat)
bday_sim <- function(sims, start = 2, stop = 50){
outcomes <- data.frame(n = start:stop, success = 0)
for (i in start:stop){
outcomes[outcomes$n == i, 2] <- sum(replicate(sims
,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
, 1, 0))) / sims
}
bday_plot <- ggplot(outcomes, aes(x = n, weight = success)) +
geom_histogram(bins = 49) +
labs(x = 'Students'
,y = 'Successes'
,title = paste(sims, 'Simulations')) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
theme_bw()
return(bday_plot)
}
bday_sim(10000)
library(ggplot2)
bday_sim <- function(sims, start = 2, stop = 50){
outcomes <- data.frame(n = start:stop, success = 0)
for (i in start:stop){
outcomes[outcomes$n == i, 2] <- sum(replicate(sims
,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
, 1, 0))) / sims
}
bday_plot <- ggplot(outcomes, aes(x = n, weight = success)) +
geom_histogram(bins = 49) +
labs(x = 'Students'
,y = 'Successes'
,title = paste(sims, 'Simulations')) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
theme_bw()
return(bday_plot)
}
bday_sim(10000)
ptm <- proc.time()
bday_sim(10000)
proc.time() - ptm
ptm <- proc.time()
bday_sim(1000)
proc.time() - ptm
bday_sim <- function(sims, start = 2, stop = 50){
outcomes <- data.frame(n = start:stop, success = 0)
for (i in start:stop){
outcomes[outcomes$n == i, 2] <- sum(replicate(sims
,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
, 1, 0))) / sims
}
#
#   bday_plot <- ggplot(outcomes, aes(x = n, weight = success)) +
#                 geom_histogram(bins = 49) +
#                 labs(x = 'Students'
#                      ,y = 'Successes'
#                      ,title = paste(sims, 'Simulations')) +
#                 scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
#                 theme_bw()
#
# return(bday_plot)
return(outcomes)
}
ptm <- proc.time()
bday_sim(1000)
proc.time() - ptm
bday_sim <- function(sims, start = 2, stop = 50){
outcomes <- data.frame(n = start:stop, success = 0)
for (i in start:stop){
outcomes[outcomes$n == i, 2] <- sum(replicate(sims
,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
, 1, 0))) / sims
}
#
#   bday_plot <- ggplot(outcomes, aes(x = n, weight = success)) +
#                 geom_histogram(bins = 49) +
#                 labs(x = 'Students'
#                      ,y = 'Successes'
#                      ,title = paste(sims, 'Simulations')) +
#                 scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
#                 theme_bw()
#
# return(bday_plot)
return(outcomes)
}
ptm <- proc.time()
bday_sim(10000)
proc.time() - ptm
test_func(100, 1)
test_func <- function(sims, i){
outcomes[outcomes$n == i, 2] <- sum(replicate(sims
,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
, 1, 0))) / sims
}
test_func(100, 1)
test_func <- function(sims, i){
outcomes <- data.frame(n = i, success = 0)
outcomes[outcomes$n == i, 2] <- sum(replicate(sims
,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
, 1, 0))) / sims
}
test_func(100, 1)
test_func <- function(sims, i){
outcomes <- data.frame(n = i, success = 0)
outcomes[outcomes$n == i, 2] <- sum(replicate(sims
,ifelse(anyDuplicated(sample(1:365
,i
,replace = TRUE)) > 0
, 1, 0))) / sims
return(outcomes)
}
test_func(100, 1)
test_func(1000, 1)
test_func(1000, 3)
test_func(1000, 4)
test_func(1000, 40)
test_func(1000, 50)
test_func(10000, 50)
test_func(100000, 50)
test_func(1000000, 50)
10000 * lengt(2:50)
10000 * length(2:50)
shiny::runApp('S:/Data Portal/erik/testing_shiny')
c(1, 0, 0, 1, rep(0, 4))
y <- c(1, 0, 0, 1, rep(0, 4))
length(y)
?dbinom
rbern(1, 1)
install.packages('LaplacesDemon')
library(LaplacesDemon)
rbern(1, 1)
rbern(1, .5)
rbern(4, .5)
rbern(8, .5)
rbern(8, .5)
rbern(8, .5)
rbern(8, .5)
rbern(8, .5)
rbern(8, .5)
rbern(8, .5)
sim == y
y <- c(1, 0, 0, 1, rep(0, 4))
sim <- rbern(8, .5)
sim == y
all(sim) == all(y)
all(sim)
all(y)
all(sim == ally) ==  TRUE
all(sim == y) ==  TRUE
all(sim == y)
ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)
ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)
ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)
ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)
replicate(1000, ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0))
replicate(100000, ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0))
bern_sim <- function(sims, y){
return(eplicate(sims, ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)) / sims)
}
bern_sim(10000, y)
bern_sim <- function(sims, y){
return(replicate(sims, ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)) / sims)
}
bern_sim(10000, y)
bern_sim <- function(sims, y){
replicate(sims, ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0))
}
bern_sim(10000, y)
bern_sim <- function(sims, y){
table(replicate(sims, ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)))
}
bern_sim(10000, y)
bern_sim <- function(sims, y){
prop.table(replicate(sims, ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)))
}
# prop.table()
bern_sim(10000, y)
bern_sim <- function(sims, y){
table(replicate(sims, ifelse(all(rbern(8, .5) == y) ==  TRUE, 1, 0)))
}
# prop.table()
bern_sim(10000, y)
31 / 10000
bern_sim(10000, y) / 10000
bern_sim(10000, y) / 10000
bern_sim(10000, y) / 10000
bern_sim(10000, y) / 10000
bern_sim(10000, y) / 10000
bern_sim(10000, y) / 10000
bern_sim(10000, y) / 10000
bern_sim(10000, y) / 10000
bern_sim(10000, y) / 10000
bern_sim(100000, y) / 10000
bern_sim(100000, y) / 10000
bern_sim(100000, y) / 10000
bern_sim(10000000, y) / 10000
bern_sim(1000000, y) / 1000000
bern_sim(10000000, y) / 10000000
install.packages('rsconnect')
rsconnect::setAccountInfo(name='pocdata', token='80AAF1FE0B0E69A1BEC1BAA938D3C7DF', secret='C9pPdFovXC1EgPnvaXIPUvathHuhctKRULJKpKlT')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('S:/Data Portal/erik/testing_shiny/')
rsconnect::deployApp('S:/Data Portal/erik/testing_shiny')
shiny::runApp('S:/Data Portal/erik/testing_shiny')
.libPaths()
.libPaths("C:/Program Files/R/R-3.3.1/library")
install.packages('rsconnect')
install.packages("rsconnect")
install.packages(c("blscrapeR", "cluster", "colorspace", "evaluate", "forecast", "mnormt", "rmarkdown", "shinythemes", "timereg"))
rsconnect::deployApp('S:/Data Portal/erik/testing_shiny')
rsconnect::deployApp('S:/Data Portal/erik/testing_shiny/')
rsconnect::deployApp('S:/Data Portal/erik/testing_shiny')
10.66 * 3
(10.66 * 3) + 99.66
10.66 * 3 + 99.66 - 8*3
10.66 * 3 + 99.66 - 8 * 3
10.66 * 3 + 99.66 - 8 * 4
shiny::runApp('S:/Data Portal/erik/testing_shiny')
runApp('S:/Data Portal/erik/testing_shiny')
library(rsconnect)
rsconnect::deployApp('S:/Data Portal/erik/testing_shiny')
source('~/.active-rstudio-document', echo=TRUE)
con <- odbcConnect('poc')
?sqlSave
sqlSave(con, USArrests, rownames = "public_data.state", addPK = TRUE)
head(USArrests)
sqlSave(channel, USArrests, rownames = "state", addPK=TRUE)
sqlSave(con, USArrests, rownames = "state", addPK=TRUE)
sqlSave(con, USArrests, tablename = 'public_data.arrests', rownames = "state", addPK=TRUE)
sqlUpdate(con, USArrests, tablename = 'public_data.arrests', rownames = "state", addPK=TRUE)
sqlUpdate(con, USArrests, tablename = 'public_data.arrests', rownames = "state", addPK=TRUE)
sqlSave(con, USArrests, tablename = 'public_data.arrests', rownames = "state", addPK=TRUE)
con <- odbcConnect('poc')
sqlSave(con, USArrests, tablename = 'public_data.arrests', rownames = "state", addPK=TRUE)
head(USArrests)
runApp('S:/Data Portal/erik/testing_shiny/alt_test')
rsconnect::setAccountInfo(name='pocdata', token='80AAF1FE0B0E69A1BEC1BAA938D3C7DF', secret='C9pPdFovXC1EgPnvaXIPUvathHuhctKRULJKpKlT')
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('S:/Data Portal/erik/testing_shiny/alt_test')
rsconnect::setAccountInfo(name='pocdata', token='3D096B48AACC917BAB9806943F16CE5C', secret='4nrJkq9+FlsfzK/KWme39zluDVsDXLkL0NAI0qPB')
rsconnect::deployApp('S:/Data Portal/erik/testing_shiny')
rsconnect::setAccountInfo(name='pocdata', token='3D096B48AACC917BAB9806943F16CE5C', secret='4nrJkq9+FlsfzK/KWme39zluDVsDXLkL0NAI0qPB')
rsconnect::deployApp('S:/Data Portal/erik/COS1')
rsconnect::setAccountInfo(name='pocdata', token='3D096B48AACC917BAB9806943F16CE5C', secret='4nrJkq9+FlsfzK/KWme39zluDVsDXLkL0NAI0qPB')
rsconnect::deployApp('S:/Data Portal/erik/COS1')
rsconnect::setAccountInfo(name='pocdata', token='3D096B48AACC917BAB9806943F16CE5C', secret='4nrJkq9+FlsfzK/KWme39zluDVsDXLkL0NAI0qPB')
rsconnect::deployApp('S:/Data Portal/erik/COS1')
shiny::runApp('S:/Data Portal/erik/COS1')
rsconnect::setAccountInfo(name='pocdata', token='3D096B48AACC917BAB9806943F16CE5C', secret='4nrJkq9+FlsfzK/KWme39zluDVsDXLkL0NAI0qPB')
rsconnect::deployApp('S:/Data Portal/erik/COS1')
runApp('S:/Data Portal/erik/COS1')
setwd('C:/Users/oieeri26.NETID/Documents/GitHub/sql_dev/ca_ods')
list.files()
list.files(recursive = TRUE)
files <- list.files(recursive = TRUE)
files[[1]]
readLines(files[[1]])
str_detect_all(readLines(files[[1]], 'cache_pbcw3_aggr')
str_detect_all(readLines(files[[1]], 'cache_pbcw3_aggr'))
str_detect_all(readLines(files[[1]], 'cache_pbcw3_aggr'))
stringr::str_detect_all(readLines(files[[1]], 'cache_pbcw3_aggr'))
?stringr
?stringr::str_detect
stringr::str_detect(readLines(files[[1]], 'cache_pbcw3_aggr'))
stringr::str_detect(readLines(files[[1]]), 'cache_pbcw3_aggr')
for (i in 1:length(files)){
if(any(stringr::str_detect(readLines(files[[i]]), 'cache_pbcw3_aggr'))){
print(files[[i]])
}
}
for (i in 1:length(files)){
if(any(stringr::str_detect(readLines(files[[i]]), 'cache_pbcw3'))){
print(files[[i]])
}
}
length(files)
files <- list.files(recursive = TRUE)
for (i in 1:length(files)){
if(any(stringr::str_detect(readLines(files[[i]]), 'rate_placement_order_specific'))){
print(files[[i]])
}
}
for (i in 1:length(files)){
if(any(stringr::str_detect(readLines(files[[i]]), 'pbcw3'))){
print(files[[i]])
}
}
files <- list.files(recursive = TRUE)
for (i in 1:length(files)){
if(any(stringr::str_detect(readLines(files[[i]]), 'ooh_point_in_time_measures'))){
print(files[[i]])
}
}
25 50000
25 * 50000
?pocr::stored_procedure
pocr::stored_procedure("ooh_wb_siblings_uncensored")
pocr::stored_procedure("ooh_wb_familysettings")
pocr::stored_procedure("ooh_pit_counts")
pocr::stored_procedure("ooh_pit_rate")
pocr::stored_procedure("ooh_flow_exits")
library(RODBC)
con <- odbcConnect('poc')
dat <- sqlQuery(con, "SELECT bc_unit, long, lat FROM rodis.berd")
head(dat)
dat <- sqlQuery(con, "SELECT bc_uni, long, lat FROM rodis.berd")
head(dat)
dat$lat
?sqlQuery
dat <- sqlQuery(con, "SELECT bc_uni, long, lat FROM rodis.berd", digits = 15)
dat <- sqlQuery(con, "SELECT bc_uni, long, lat FROM rodis.berd", as.is = TRUE)
head(dat)
pocr::stored_procedure("ooh_pit_counts")
pocr::stored_procedure("ooh_flow_entries_counts")
?pocr::stored_procedure
pocr::stored_procedure("ia_trends_counts")
pocr::stored_procedure('ooh_flow_exits')
pocr::stored_procedure('ooh_reentry')
pocr::stored_procedure('ia_safety')
con <- odbcConnect('annie')
dat <- sqlQuery(con, "SELECT * FROM ooh_point_in_time_measures", as.is = TRUE)
head(dat)
pocr::stored_procedure('ooh_wb_familysetting')
dat2 <- sqlQuery(con, "SELECT * FROM cache_pbcw3_aggr", as.is = TRUE)
dim(dat2)
test_annie <- odbcConnect('test_annie')
testA_abbie_dat <- sqlQuery(test_annie, "SELECT * FROM cache_pbcw3_aggr", as.is = TRUE)
testA_abbie_dat
write.csv(testA_abbie_dat, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr')
write.csv(testA_abbie_dat, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr', col.names = FALSE)
write.csv(testA_abbie_dat, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr'
, col.names = FALSE)
?write
write.csv(testA_abbie_dat, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt')
write(testA_abbie_dat, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt')
write(testA_abbie_dat, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt', sep = ',')
?write.csv
?write.table
write.table(testA_abbie_dat, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt', sep = ',')
write.table(testA_abbie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = ','
,quote = FALSE)
head(testA_abbie_dat)
annie <- odbcConnect('annie')
sqlSave(annie, dat = testA_abbie_dat, tablename = cache_pbcw3_aggr, append = TRUE)
sqlSave(annie, dat = testA_abbie_dat, tablename = 'cache_pbcw3_aggr', append = TRUE)
?sqlSave
sqlUpdate(annie, dat = testA_abbie_dat, tablename = 'cache_pbcw3_aggr')
testA_abbie_dat
sqlUpdate(annie, dat = testA_abbie_dat, tablename = 'annie.cache_pbcw3_aggr')
write.table(testA_abbie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = ','
,quote = FALSE)
write.table(testA_abbie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = '|'
,quote = FALSE)
write.table(testA_abbie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE)
write.table(testA_abbie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE)
write.table(testA_abbie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
sqlQuery(test_annie, "SELECT * FROM annie.cache_pbcw3_aggr;", as.is = TRUE)
test_annie
sqlQuery(test_annie, "SELECT * FROM test_annie.cache_pbcw3_aggr;", as.is = TRUE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_pbcw3_aggr;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_qry_param_pbcw3;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_qry_param_pbcw3.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_pbcw3_aggr;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_qry_param_pbcw3;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_qry_param_pbcw3.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_qry_param_pbcw3;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_qry_param_pbcw3.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_pbcw3_aggr;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_qry_param_pbcw3;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_qry_param_pbcw3.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_pbcw3_params;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_params.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
test_annie_dat <- sqlQuery(test_annie, "SELECT * FROM test_annie.cache_pbcw3_aggr;", as.is = TRUE)
write.table(test_annie_dat
, 'S:/Data Portal/data/files for test_annie/20161021/cache_pbcw3_aggr.txt'
, sep = '|'
,quote = FALSE
,col.names = FALSE
,row.names = FALSE)
